#define USE_DOUBLE 1

#if USE_DOUBLE
#define dfloat double
#define dfloat4 double4
#define LOGDF log
#define POWDF pow
#define EXPDF exp
#define HALF .5
#define ONE 1.0
#define TWO 2.0
#define ZERO 0.0
#define TOL 1.e-3
#define C1 .3333333333333
#define C2 .2
#define C3 0.142857142857143
#define C4 .1111111111111111

#else
#define dfloat float
#define dfloat4 float4
#define LOGDF logf
#define POWDF powf
#define EXPDF expf
#define HALF .5f
#define ONE 1.f
#define TWO 2.f
#define ZERO 0.f;
#define TOL 1.fe-3
#define C1 .333333333f
#define C2 .2f
#define C3 0.142857142857143f
#define C4 .1111111111111111f
#endif

// helpful functions
// take the average of two numbers
#define avg( a, b ) HALF * ( a + b )

// entropy project function v(u)
void VU( const dfloat h, const dfloat hu, const dfloat hv, const dfloat b,
		       dfloat &V1,     dfloat &V2,      dfloat &V3 ){
	/* inputs:
	h:  SWE water height
	hu: SWE h * u, u is water velocity in the x direction
	hv: SWE h * v, v is water velocity in the y direction
	b:  SWE bottom height
	V1: SWE entropy variable for h component
	V2: SWE entropy variable for hu component
	V3: SWE entropy variable for hv component
	other:
	g:  SWE gravitational constant
	*/
	V2 = hu / h;
	V3 = hv / h;
	V1 = p_g * h + p_g * b - 0.5 * ( V2 * V2 + V3 * V3 );
}

// entropy project function u(v)
void UV( const dfloat V1, const dfloat V2, const dfloat V3, const dfloat b,
	           dfloat &h,       dfloat &hu,      dfloat &hv ){
	/* inputs:
	V1: SWE entropy variable for h component
	V2: SWE entropy variable for hu component
	V3: SWE entropy variable for hv component
	b:  SWE bottom height
	g:  SWE gravitational constant
	h:  SWE water height evalution at quadrature points
	hu: SWE h * u, evalution at quadrature points
	hv: SWE h * v, evalution at quadrature points
	other:
	g:  SWE gravitational constant
	*/
	h = ( V1 + .5 * ( V2 * V2 + V3 * V3 ) ) / p_g - b;
	hu = h * V2;
	hv = h * V3;
}

// compute the flux for SWE 2D (surface flux)
void SWE2d_Sflux( const dfloat hL, const dfloat hR, const dfloat uL,
				  const dfloat uR, const dfloat vL, const dfloat vR,
                        dfloat &FxS1,    dfloat &FyS1,    dfloat &FxS2,
                        dfloat &FyS2,    dfloat &FxS3,    dfloat &FyS3 ){
	/* inputs:
	hL: 	SWE water height on the left
	hR: 	SWE water height on the right
	uL: 	SWE water velocity in x direction on the left
	uR:  	SWE water velocity in x direction on the right
	vL:  	SWE water velocity in y direction on the left
	vR:  	SWE water velocity in y direction on the right
	FxS123: surface flux for x direction for component 1, 2 and 3
	FyS123: surface flux for y direction for component 1, 2 and 3
	other:
	g:  SWE gravitational constant
	*/
	//     h_avg:     {{h}}
	const dfloat h_avg = avg( hL, hR );
	//     u_avg:     {{u}}
	const dfloat u_avg = avg( uL, uR );
	//     v_avg:     {{v}}
	const dfloat v_avg = avg( vL, vR );
	//     half_g_h_sq_avg:  .5 *  g  *    {{h^2}}
	const dfloat half_g_h_sq_avg = p_g_half * avg( hL * hL, hR * hR );
 // FxS1: {{h}}{{u}}
	FxS1 = h_avg * u_avg;
 // FyS1: {{h}}{{v}}
	FyS1 = h_avg * v_avg;
 // FxS2: {{h}}{{u}}{{u}} + .5g{{h^2}}
	FxS2 = FxS1 * u_avg + half_g_h_sq_avg;
 // FyS2: {{h}}{{v}}{{u}}
	FyS2 = FyS1 * u_avg;
 // FxS3: {{h}}{{u}}{{v}}, same as FyS2
	FxS3 = FyS2;
 // FyS3: {{h}}{{v}}{{v}} + .5g{{h^2}}
	FyS3 = FyS1 * v_avg + half_g_h_sq_avg;
}

// compute the flux for SWE 2D (volume flux)
void SWE2d_Vflux( const dfloat hL, const dfloat hR, const dfloat uL, 
				  const dfloat uR, const dfloat vL, const dfloat vR,
                        dfloat &FxV1, 	 dfloat &FyV1,    dfloat &FxV2,
                        dfloat &FyV2, 	 dfloat &FxV3,    dfloat &FyV3 ){
	/* inputs:
	hL: 	SWE water height on the left
	hR: 	SWE water height on the right
	uL: 	SWE water velocity in x direction on the left
	uR:  	SWE water velocity in x direction on the right
	vL:  	SWE water velocity in y direction on the left
	vR:  	SWE water velocity in y direction on the right
	FxV123: volume flux for x direction for component 1, 2 and 3
	FyV123: volume flux for y direction for component 1, 2 and 3
	other:
	g:  SWE gravitational constant
	*/
	//     h_avg:     {{h}}
	const dfloat h_avg = avg( hL, hR );
	//     u_avg:     {{u}}
	const dfloat u_avg = avg( uL, uR );
	//     v_avg:     {{v}}
	const dfloat v_avg = avg( vL, vR );
	//     half_g_h_sq_avg:  .5 *  g  *    {{h^2}}
	const dfloat half_g_h_sq_avg = p_g_half * avg( hL * hL, hR * hR );

	const dfloat g_h_avg_sq = p_g * h_avg * h_avg;
 // FxV1: {{hu}}
	FxV1 = avg( hL * uL, hR * uR );
 // FyV1: {{hv}}
	FyV1 = avg( hL * vL, hR * vR );
 // FxV2: {{hu}}*{{u}}  + g *{{h}}*{{h}} - .5g{{h^2}}
	FxV2 = FxV1 * u_avg + g_h_avg_sq - half_g_h_sq_avg;
 // FyV2: {{hv}}* {{u}}
	FyV2 = FyV1 * u_avg;
 // FyV2: {{hu}}* {{v}}
	FxV3 = FxV1 * v_avg;
 // FyV3: {{hv}}*{{v}}  + g*{{h}}*{{h}} - .5g{{h^2}}
	FyV3 = FyV1 * v_avg + g_h_avg_sq - half_g_h_sq_avg;
}

// compute L2 projection of entropy variables
@kernel void project( const int K, 
	                  const dfloat * M_inv,
					  const dfloat * VN,
					  const dfloat * WqJJ,
		     		  dfloat * Qv, 
		     		  dfloat * Qf,
		     		  dfloat * rhsv ){
	/* inputs:
	K:   total number of elements in the mesh
	M_inv: contains mass matrices inverses for all elements
	Vq:    volume quadrature interpolation matrix
	VN:    [Vq;Vf]
	wq:    quadrature weights for volume quadrature points
	WqJJ:  wq .* (Vq * J ), geometric factors for volume
	Qv:    variable to hold projected volume values
	Qf:    variable to hold projected face values
	*/
	// loop over all elements, iterator
	// k_g denoted index of the group
	// k_e denoted index of element inside a group
	for( int k_g = 0; k_g < ( K + p_KblkP - 1 ) / p_KblkP; ++k_g; @outer( 0 ) ){
		// declare shared memory for all nodes in one elements
		// p_Nq: number of volume quadrature points in one element
		@shared dfloat s_Q[ p_KblkP ][ p_Nfields + 1 ][ p_Nq ];
		// s_WqJJ: stores wq .* (Vq * J ) column e
		@shared dfloat s_WqJJ[ p_KblkP ][ p_Nq ];
		// s_VqTwqJJV: store Vq^T * ( wq .* JJ( :, e ) .* V(u)  )
		@shared dfloat s_VqTwqJJV[ p_KblkP ][ p_Nfields ][ p_Np ];
		// s_M_inv_eV: M_inverse * VqTwqJJV
		@shared dfloat s_M_inv_eV[ p_KblkP ][ p_Nfields ][ p_Np ];

		// k_e denoted index of element inside a group
		const int k_g_e_start = k_g * p_KblkP;
		for( int k_e = 0; k_e < p_KblkP; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){
				// extract values of conservative vars at quad pts
			    // p_NqT: total number of quadrature points in one element
			    // loop over all quadrature points in one element
				for( int i = 0; i < p_NqT; ++i; @inner( 0 ) ){
					// we project the volume quadrature points first
					if( i < p_Nq ){
						// get the index of all fields for that quadrature points
						int id = i + e * p_Nq * ( p_Nfields + 1 );
						// extract the info from Qv for the fields
						const dfloat u1 = Qv[ id ]; id += p_Nq;
						const dfloat u2 = Qv[ id ]; id += p_Nq;
						const dfloat u3 = Qv[ id ]; id += p_Nq;
						const dfloat bt = Qv[ id ];
						// compute entropy variables at qpts
						dfloat v1, v2, v3;
						VU( u1, u2, u3, bt, v1, v2, v3 );

						s_Q[ k_e ][ 0 ][ i ] = v1;
						s_Q[ k_e ][ 1 ][ i ] = v2;
						s_Q[ k_e ][ 2 ][ i ] = v3;
						s_Q[ k_e ][ 3 ][ i ] = bt;
						s_WqJJ[ k_e ][ i ] = WqJJ[ i + p_Nq * e ];
					}
				}// inner( 0 )
			}// e < K
		}// k_e
		@barrier( "localMemFence" );
		
		// loop over all the element in the group
		for( int k_e = 0; k_e < p_KblkP; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){	        
				// calculate VqTwqJJV
				// loop over all rows of Vq^T
				for( int i = 0; i < p_NqT; ++i; @inner( 0 ) ){
					if( i < p_Np ){
						// loop over all column of Vq^T
						// val: accumulate matrix vector multiplication result
						dfloat val[ p_Nfields ];
						for( int fld = 0; fld < p_Nfields + 1; ++fld ){
							val[ fld ] = ZERO; 
						}
						for( int j = 0; j < p_Nq; ++j ){
							// WqJJi: wq .* JJi
							const dfloat WqJJi = s_WqJJ[ k_e ][ j ];
							// VqTij: Vq^T(i,j) i * p_NqT get to the ith column, j iterate down
							const dfloat VqTij = VN[ i * p_NqT + j ];
							for ( int fld = 0; fld < p_Nfields; ++fld ){
								val[ fld ] += VqTij * WqJJi * s_Q[ k_e ][ fld ][ j ];
							}
						}
						for ( int fld = 0; fld < p_Nfields; ++fld ){
							s_VqTwqJJV[ k_e ][ fld ][ i ] = val[ fld ];
						}
					}
				}// inner( 0 )
			}// e < K
		}// k_e
		@barrier( "localMemFence" );

		// loop over all the element in the group
		for( int k_e = 0; k_e < p_KblkP; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){
				// compute M_inverse * VqTwqJJV
		        for( int i = 0; i < p_NqT; ++i; @inner( 0 ) ){
					if( i < p_Np ){
						// val: accumulate matrix vector multiplication result
			        	dfloat val[ p_Nfields ];
						for( int fld = 0; fld < p_Nfields + 1; ++fld ){
							val[ fld ] = ZERO; 
						}
						for( int j = 0; j < p_Np; ++j ){
					        // Mij: mass matrix inverse( i, j )
							const dfloat Mij = M_inv[ i + p_Np * e + K * p_Np * j ];
							for( int fld = 0; fld < p_Nfields; ++fld ){
								val[ fld ] += Mij * s_VqTwqJJV[ k_e ][ fld ][ j ];
							}
						}
						// update s_M_inv_eV result
						for( int fld = 0; fld < p_Nfields; ++fld ){
							s_M_inv_eV[ k_e ][ fld ][ i ] = val[ fld ]; 
						}
					}
				}// inner( 0 )
			}// e < K
		}// k_e
		@barrier( "localMemFence" );

#if DEBUG
		// loop over all the element in the group
		for( int k_e = 0; k_e < p_KblkP; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){
			    // rhstest for debugging
				for( int i = 0; i < p_NqT; ++i; @inner( 0 ) ){
					if( i < p_Np ){
						int rhsv_idx = i + p_Np * p_Nfields * e;
						for( int fld = 0; fld < p_Nfields; ++fld ){
							rhsv[ rhsv_idx ] = s_M_inv_eV[ k_e ][ fld ][ i ];
							rhsv_idx += p_Np;
						}
					}
				}// inner( 0 )
			}// e < K
		}// k_e		
		@barrier( "localMemFence" );
#endif

		// loop over all the element in the group
		for( int k_e = 0; k_e < p_KblkP; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){
				// compute projection of entropy variables
				for( int i = 0; i < p_NqT; ++i; @inner( 0 ) ){
					// val: accumulate matrix vector multiplication result
					dfloat val[ p_Nfields ];
					for( int fld = 0; fld < p_Nfields; ++fld ){
						val[ fld ] = ZERO; 
					}

					// multiply each field of v(u) by (VN * Pq)
					for( int j = 0; j < p_Np; ++j ){
						// VNij = VN(i,j) 
						const dfloat VNij = VN[ i + j * p_NqT ];
						for ( int fld = 0; fld < p_Nfields; ++fld ){
							val[ fld ] += VNij * s_M_inv_eV[ k_e ][ fld ][ j ];
						}
					}

					// convert entropy to conservative variables and store
					const dfloat v1 = val[ 0 ];
					const dfloat v2 = val[ 1 ];
					const dfloat v3 = val[ 2 ];
					// get the bottom geometry for projection
					dfloat bt;
					if( i < p_Nq ){
						bt = s_Q[ k_e ][ 3 ][ i ];
					}else{ 
						// e * ( p_Nfields + 1 ) * p_NfqNfaces reach the column of this element
						int idb = e * ( p_Nfields + 1 ) * p_NfqNfaces;
						// p_Nfields * p_NfqNfaces skip hf,uf,vf in that column
						// i - p_Nq index into the face quadrature pt of bottom geometry
						idb += i - p_Nq + p_Nfields * p_NfqNfaces;
						bt = Qf[ idb ];
					}
					// compute the projection UV
					dfloat u1,u2,u3;
					UV( v1, v2, v3, bt, u1, u2, u3 );      

					// idv: index for volume nodes info
					int idv = i + e * ( p_Nfields + 1 ) * p_Nq;
					// idf: index for face nodes info
					int idf = ( i - p_Nq ) + e * ( p_Nfields + 1 ) * p_NfqNfaces;
					// update the projection 
					if( i < p_Nq ){
						Qv[ idv ] = u1; idv += p_Nq;
						Qv[ idv ] = u2; idv += p_Nq;
						Qv[ idv ] = u3; 
					}else{
						Qf[ idf ] = u1; idf += p_NfqNfaces;
						Qf[ idf ] = u2; idf += p_NfqNfaces;
						Qf[ idf ] = u3;
					}      
				}// inner( 0 )
			}// e < K
			@barrier( "localMemFence" );
		}// k_e
	}// k_g
}

@kernel void volume1( const int K,
		    		  const dfloat *  rxJJ,
		    		  const dfloat *  ryJJ,
		    		  const dfloat *  sxJJ,
		    		  const dfloat *  syJJ,
		    		  const dfloat *  gBTMx,
		    		  const dfloat *  gBTMy,
		    		  const dfloat *  QNr,
		    		  const dfloat *  QNs,
		    		  const dfloat *  Qv,
		    		  const dfloat *  Qf,
		    		        dfloat *  rhsv ){
	/* inputs:
	K:    total number of mesh elements
	rxJJ:  VN * ( mesh->rxJ );
	ryJJ:  VN * ( mesh->ryJ );
	sxJJ:  VN * ( mesh->sxJ );
	syJJ:  VN * ( mesh->syJ );
	gBTMx: g * QNx * BTM, x derivative of bottom geometry
	gBTMy: g * QNy * BTM, y derivative of bottom geometry
	QNr:   skew symmetric form of SBP matrix for r direction
	QNs:   skew symmetric form of SBP matrix for s direction
    VN:    [Vq;Vf]
    Qv:    variable to hold projected volume values
	Qf:    variable to hold projected face values
    rhs:   variable to hold updated right hand side information
	*/ 	
	// k_g denoted index of the group
	// k_e denoted index of element inside a group
    // looping over all the group
	for( int k_g = 0; k_g < ( K + p_KblkV1 - 1 ) / p_KblkV1; ++k_g; @outer( 0 ) ){
		// setting up the shared memories for fast read and write
		// s_Q: store Q values
		@shared dfloat s_Q[ p_KblkV1 ][ p_Nfields ][ p_NqT ];
		@shared dfloat s_gBTx[ p_KblkV1 ][ p_NqT ];
		@shared dfloat s_gBTy[ p_KblkV1 ][ p_NqT ];

		// store geometric terms  
		@shared dfloat s_rxJJ[ p_KblkV1 ][ p_NqT ]; 
		@shared dfloat s_ryJJ[ p_KblkV1 ][ p_NqT ];  
		@shared dfloat s_sxJJ[ p_KblkV1 ][ p_NqT ];  
		@shared dfloat s_syJJ[ p_KblkV1 ][ p_NqT ];  
		// loop over all the elements in the group
		const int k_g_e_start = k_g * p_KblkV1;
		for( int k_e = 0; k_e < p_KblkV1; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){   
				// assume these are conservative variables
				// looping over all the quadrature pts
				for( int i = 0; i < p_NqT; ++i; @inner( 0 ) ){
		            int geo_idx = i + p_NqT * e;
					s_rxJJ[ k_e ][ i ] = rxJJ[ geo_idx ];
					s_ryJJ[ k_e ][ i ] = ryJJ[ geo_idx ];
					s_sxJJ[ k_e ][ i ] = sxJJ[ geo_idx ];
					s_syJJ[ k_e ][ i ] = syJJ[ geo_idx ];
					s_gBTx[ k_e ][ i ] = gBTMx[ geo_idx ];
					s_gBTy[ k_e ][ i ] = gBTMy[ geo_idx ];
				  
					// draw from both vol and face values, read out to shared from Qv and Qf
					// idv: index for the volume value
					// idf: index for the face value
					int idv = i + p_Nq * ( p_Nfields + 1 ) * e;
					int idf = i - p_Nq + p_NfqNfaces * ( p_Nfields + 1 ) * e;      
					for( int fld = 0; fld < p_Nfields; ++fld ){
						if( i < p_Nq ){
							s_Q[ k_e ][ fld ][ i ] = Qv[ idv ]; idv += p_Nq;
						}else{
						  	s_Q[ k_e ][ fld ][ i ] = Qf[ idf ]; idf += p_NfqNfaces;
						}
					}
				}//inner( 0 )
			}// e< K
		}// k_e

		@barrier( "localMemFence" );  

		for( int k_e = 0; k_e < p_KblkV1; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){          
				// apply flux differencing: sum(Q.*F,2) -> s_rhsv (shared memory)
				for( int i = 0; i < p_NqT; ++i; @inner( 0 ) ){
				    // val: store the volume flux 
					dfloat val[ p_Nfields + 1 ];
					for( int fld = 0; fld < p_Nfields + 1; ++fld ){
						val[ fld ] = ZERO; 
					}
					// extract the info from the ith node
					const dfloat h_i     = s_Q[ k_e ][ 0 ][ i ];
					const dfloat inv_h_i = ONE / h_i;
					const dfloat u_i     = s_Q[ k_e ][ 1 ][ i ] * inv_h_i;
					const dfloat v_i     = s_Q[ k_e ][ 2 ][ i ] * inv_h_i;
		            
					// apply Qr, Qs
					// in thus loop, we sum the Qxij * FxVij + Qyij * FyVij over j
					for( int j = 0; j < p_Nq; ++j ){
						// extract the info from the jth node
						const dfloat h_j     = s_Q[ k_e ][ 0 ][ j ];
						const dfloat inv_h_j = ONE / h_j;
						const dfloat u_j     = s_Q[ k_e ][ 1 ][ j ] * inv_h_j;
						const dfloat v_j     = s_Q[ k_e ][ 2 ][ j ] * inv_h_j;
					
						// compute the volume flux
						dfloat FxV1, FyV1, FxV2, FyV2, FxV3, FyV3;
						SWE2d_Vflux( h_i, h_j, u_i, u_j, v_i, v_j,
						     		 FxV1, FyV1, FxV2, FyV2, FxV3, FyV3 );
						
						const dfloat Qrij = HALF * QNr[ i + j * p_NqT ];
						const dfloat Qsij = HALF * QNs[ i + j * p_NqT ];
						const dfloat Qx   = Qrij * ( s_rxJJ[ k_e ][ i ] + s_rxJJ[ k_e ][ j ] ) +
						                    Qsij * ( s_sxJJ[ k_e ][ i ] + s_sxJJ[ k_e ][ j ] );
						const dfloat Qy   = Qrij * ( s_ryJJ[ k_e ][ i ] + s_ryJJ[ k_e ][ j ] )+
						                    Qsij * ( s_syJJ[ k_e ][ i ] + s_syJJ[ k_e ][ j ] );

						val[ 0 ] += Qx * FxV1 + Qy * FyV1;
						val[ 1 ] += Qx * FxV2 + Qy * FyV2;
						val[ 2 ] += Qx * FxV3 + Qy * FyV3;
					}
					val[ 1 ] += h_i * s_gBTx[ k_e ][ i ] / 2;
					val[ 2 ] += h_i * s_gBTy[ k_e ][ i ] / 2;
					
					// write out to the shared memory
					int id = i + e * p_Nfields * p_NqT;
					for( int fld = 0; fld < p_Nfields; ++fld ){
						rhsv[ id ] = val[ fld ]; id += p_NqT;
					}
				}// inner0
			}// e < K
		}// k_e
	}// k_g
}

@kernel void volume2( const int K,
		    		  const dfloat *  rxJJ,
		    		  const dfloat *  ryJJ,
		    		  const dfloat *  sxJJ,
		    		  const dfloat *  syJJ,
		    		  const dfloat *  QNr,
		    		  const dfloat *  QNs,
		    		  const dfloat *  Qv,
		    		  const dfloat *  Qf,
		    		        dfloat *  rhsv ){
	/* inputs:
	K:    total number of mesh elements
	rxJJ:  VN * ( mesh->rxJ );
	ryJJ:  VN * ( mesh->ryJ );
	sxJJ:  VN * ( mesh->sxJ );
	syJJ:  VN * ( mesh->syJ );
	gBTMx: g * QNx * BTM, x derivative of bottom geometry
	gBTMy: g * QNy * BTM, y derivative of bottom geometry
	QNr:   skew symmetric form of SBP matrix for r direction
	QNs:   skew symmetric form of SBP matrix for s direction
    VN:    [Vq;Vf]
    Qv:    variable to hold projected volume values
	Qf:    variable to hold projected face values
    rhs:   variable to hold updated right hand side information
	*/ 	
	// k_g denoted index of the group
	// k_e denoted index of element inside a group
    // looping over all the group
	for( int k_g = 0; k_g < ( K + p_KblkV2 - 1 ) / p_KblkV2; ++k_g; @outer( 0 ) ){
		// setting up the shared memories for fast read and write
		// s_Q: store Q values
		@shared dfloat s_Q[ p_KblkV2 ][ p_Nfields ][ p_NqT ];
		// store geometric terms  
		@shared dfloat s_rxJJ[ p_KblkV2 ][ p_NqT ]; 
		@shared dfloat s_ryJJ[ p_KblkV2 ][ p_NqT ];  
		@shared dfloat s_sxJJ[ p_KblkV2 ][ p_NqT ];  
		@shared dfloat s_syJJ[ p_KblkV2 ][ p_NqT ];  
		// loop over all the elements in the group
		const int k_g_e_start = k_g * p_KblkV2;
		for( int k_e = 0; k_e < p_KblkV2; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){   
				// assume these are conservative variables
				// looping over all the quadrature pts
				for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
					int ii = i;
					while( ii < p_NqT ){
			            int geo_idx = ii + p_NqT * e;
						s_rxJJ[ k_e ][ ii ] = rxJJ[ geo_idx ];
						s_ryJJ[ k_e ][ ii ] = ryJJ[ geo_idx ];
						s_sxJJ[ k_e ][ ii ] = sxJJ[ geo_idx ];
						s_syJJ[ k_e ][ ii ] = syJJ[ geo_idx ];				  
						// draw from both vol and face values, read out to shared from Qv and Qf
						// idv: index for the volume value
						// idf: index for the face value
						int idv = ii + p_Nq * ( p_Nfields + 1 ) * e;
						int idf = ii - p_Nq + p_NfqNfaces * ( p_Nfields + 1 ) * e;      
						for( int fld = 0; fld < p_Nfields; ++fld ){
							if( ii < p_Nq ){
								s_Q[ k_e ][ fld ][ ii ] = Qv[ idv ]; idv += p_Nq;
							}else{
							  	s_Q[ k_e ][ fld ][ ii ] = Qf[ idf ]; idf += p_NfqNfaces;
							}
						}
						// skip the bottom geometry part
						if( ii < p_Nq ){
							idv += p_Nq;
						}else{
							idf += p_NfqNfaces;
						}
						ii += p_Nq;
					}// ii < p_NqT
				}//inner( 0 )
			}// e< K
		}// k_e

		@barrier( "localMemFence" );  

		for( int k_e = 0; k_e < p_KblkV2; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){          
				// apply flux differencing: sum(Q.*F,2) -> s_rhsv (shared memory)
				for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
				    // val: store the volume flux 
					dfloat val[ p_Nfields ];
					for( int fld = 0; fld < p_Nfields; ++fld ){
						val[ fld ] = ZERO; 
					}
					// extract the info from the ith node
					const dfloat h_i     = s_Q[ k_e ][ 0 ][ i ];
					const dfloat inv_h_i = ONE / h_i;
					const dfloat u_i     = s_Q[ k_e ][ 1 ][ i ] * inv_h_i;
					const dfloat v_i     = s_Q[ k_e ][ 2 ][ i ] * inv_h_i;
		            
					// apply Qr, Qs
					// in thus loop, we sum the Qxij * FxVij + Qyij * FyVij over j
					for( int j = p_Nq; j < p_NqT; ++j ){
						// extract the info from the jth node
						const dfloat h_j     = s_Q[ k_e ][ 0 ][ j ];
						const dfloat inv_h_j = ONE / h_j;
						const dfloat u_j     = s_Q[ k_e ][ 1 ][ j ] * inv_h_j;
						const dfloat v_j     = s_Q[ k_e ][ 2 ][ j ] * inv_h_j;
					
						// compute the volume flux
						dfloat FxV1, FyV1, FxV2, FyV2, FxV3, FyV3;
						SWE2d_Vflux( h_i, h_j, u_i, u_j, v_i, v_j,
						     		 FxV1, FyV1, FxV2, FyV2, FxV3, FyV3 );
						
						const dfloat Qrij = HALF * QNr[ i + j * p_NqT ];
						const dfloat Qsij = HALF * QNs[ i + j * p_NqT ];
						const dfloat Qx   = Qrij * ( s_rxJJ[ k_e ][ i ] + s_rxJJ[ k_e ][ j ] ) +
						                    Qsij * ( s_sxJJ[ k_e ][ i ] + s_sxJJ[ k_e ][ j ] );
						const dfloat Qy   = Qrij * ( s_ryJJ[ k_e ][ i ] + s_ryJJ[ k_e ][ j ] )+
						                    Qsij * ( s_syJJ[ k_e ][ i ] + s_syJJ[ k_e ][ j ] );

						val[ 0 ] += Qx * FxV1 + Qy * FyV1;
						val[ 1 ] += Qx * FxV2 + Qy * FyV2;
						val[ 2 ] += Qx * FxV3 + Qy * FyV3;
					}
					
					// write out to the shared memory
					int id = i + e * p_Nfields * p_NqT;
					for( int fld = 0; fld < p_Nfields; ++fld ){
						rhsv[ id ] += val[ fld ]; id += p_NqT;
					}
				}// inner0
			}// e < K
		}// k_e
	}// k_g
}

@kernel void volume3( const int K, 
			    	  const dfloat * VN   @restrict,
	 				  const dfloat * rhsv @restrict,
	 						dfloat * rhs  @restrict ){
	/* inputs:
	K:    total number of mesh elements
	rxJJ:  VN * ( mesh->rxJ );
	ryJJ:  VN * ( mesh->ryJ );
	sxJJ:  VN * ( mesh->sxJ );
	syJJ:  VN * ( mesh->syJ );
	gBTMx: g * QNx * BTM, x derivative of bottom geometry
	gBTMy: g * QNy * BTM, y derivative of bottom geometry
	QNr:   skew symmetric form of SBP matrix for r direction
	QNs:   skew symmetric form of SBP matrix for s direction
    VN:    [Vq;Vf]
    Qv:    variable to hold projected volume values
	Qf:    variable to hold projected face values
    rhs:   variable to hold updated right hand side information
	*/ 	
	// k_g denoted index of the group
	// k_e denoted index of element inside a group
    // looping over all the group
	for( int k_g = 0; k_g < ( K + p_KblkV3 - 1 ) / p_KblkV3; ++k_g; @outer( 0 ) ){
		const int k_g_e_start = k_g * p_KblkV3;
		for( int k_e = 0; k_e < p_KblkV3; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){
				// project s_rhsv using VN = Np x (Nq + Nfq*Nfaces)
				for( int i = 0; i < p_Np; ++i; @inner( 0 ) ){
					dfloat val[ p_Nfields ];
					for( int fld = 0; fld < p_Nfields; ++fld ){
						val[fld] = ZERO; 
					}
					// perform the matrix multiplication on s_rhsv	
					for ( int j = 0; j < p_NqT; ++j ){
						const dfloat VNij = VN[ i * p_NqT + j ];
						int id = j + e * p_Nfields * p_NqT;
						for( int fld = 0; fld < p_Nfields; ++fld ){
						 	// val[ fld ] += PNij * s_rhsv[ k_e ][ fld ][ j ];
						 	val[ fld ] += VNij * rhsv[ id ]; id += p_NqT;
						}	  
					}

					// store output to rhs
					int id = i + e * p_Nfields * p_Np;
					for( int fld = 0; fld < p_Nfields; ++fld ){	
						rhs[ id ] = 2 * val[ fld ]; id += p_Np;
					}			  
				}// inner0
			}// e < K
		}//k_E
	}//k_g
}

@kernel void surface( const int K,
		     		  const dfloat * fgeo,		     
		     		  const int    * mapPq, // face index into volume nodes
		     		  const int    * bcFlag,
		     		  const dfloat * VfTWf,  // lifting matrix
		    		  const dfloat * Qf, // entropy projected variables
		     		        dfloat * rhs ){
	/* inputs:
	K:      total number of mesh elements
	fgeo:   face node geometric terms [rxJ, rxJf]
	mapPq:  map from face node to neighbor face node
	bcFlag: Flag to specify boundary conditions
    VfTWf:  Vf^T * Wf );
	Qf:     variable to hold projected face values
    rhs:    variable to hold updated right hand side information
	*/ 	

	// k_g denoted index of the group
	// k_e denoted index of element inside a group
    // looping over all the group
	for( int k_g = 0; k_g < ( K + p_KblkS - 1 ) / p_KblkS; ++k_g; @outer( 0 ) ){

		@shared dfloat s_fnS[ p_KblkS ][ p_Nfields ][ p_NfqNfaces ];
		// loop over all the elements in the group
		const int k_g_e_start = k_g * p_KblkS;
        for( int k_e = 0; k_e < p_KblkS; ++k_e; @inner( 1 ) ){  
        	const int e = k_g_e_start + k_e;
        	if( e < K ){
				for( int i = 0; i < p_T; ++i; @inner( 0 ) ){
					if( i < p_NfqNfaces ){
						// idM: index of current node
						// idP: index of neighbor node
						int idM = i + e * ( p_Nfields + 1 ) * p_NfqNfaces;
						int idP = mapPq[ i + e * p_NfqNfaces ];
						// cout << "idM: " << idM << endl;
						// cout << "idP: " << idP << endl << endl << endl;
						// load +/- values
						const dfloat hM  = Qf[ idM ];  idM += p_NfqNfaces;
						const dfloat huM = Qf[ idM ];  idM += p_NfqNfaces;
						const dfloat hvM = Qf[ idM ];

						const dfloat hP  = Qf[ idP ];  idP += p_NfqNfaces;
						const dfloat huP = Qf[ idP ];  idP += p_NfqNfaces;
						const dfloat hvP = Qf[ idP ];

						const dfloat inv_hM = ONE / hM;
						const dfloat uM     = huM * inv_hM;
						const dfloat vM     = hvM * inv_hM;
						const dfloat inv_hP = ONE / hP; 	
						const dfloat uP     = huP * inv_hP;	
						const dfloat vP     = hvP * inv_hP;
		 
						// compute the surface flux
						dfloat FxS1,FxS2,FxS3,FyS1,FyS2,FyS3;      
						SWE2d_Sflux( hM, hP, uM, uP, vM, vP,
							 		  FxS1, FyS1, FxS2, FyS2, FxS3, FyS3 );

						// use skew symmetric form to remove the calculation of the volume flux
						// dfloat FxV1, FyV1, FxV2, FyV2, FxV3, FyV3;
						// SWE2d_Vflux( hM, hM, uM, uM, vM, vM,
						//      		 FxV1, FyV1, FxV2, FyV2, FxV3, FyV3 );

						// constant over each face but oh well
						const int    idf  = i + p_NfqNfaces * p_Nfgeo * e;
						const dfloat nxJ  = fgeo[ idf ];
						const dfloat nyJ  = fgeo[ idf + p_NfqNfaces ];
						const dfloat sJ   = fgeo[ idf + 2 * p_NfqNfaces ];
						const dfloat nx   = nxJ / sJ;
						const dfloat ny   = nyJ / sJ;
						const dfloat LM   = abs( uM * nx + vM * ny ) + sqrt( p_g * hM );
						const dfloat LP   = abs( uP * nx + vP * ny ) + sqrt( p_g * hP );
						const dfloat LFc  = fmax( LM, LP );
						const dfloat LfsJ = HALF * p_tau * LFc * sJ;

						const dfloat dF1  = LfsJ * ( hP - hM );
						const dfloat dF2  = LfsJ * ( hP * uP - hM * uM );
						const dfloat dF3  = LfsJ * ( hP * vP - hM * vM );

						// s_fnS[ 0 ][ i ] = ( FxS1 - FxV1 ) * nxJ + ( FyS1 - FyV1 ) * nyJ - dF1;
						// s_fnS[ 1 ][ i ] = ( FxS2 - FxV2 ) * nxJ + ( FyS2 - FyV2 ) * nyJ - dF2;
						// s_fnS[ 2 ][ i ] = ( FxS3 - FxV3 ) * nxJ + ( FyS3 - FyV3 ) * nyJ - dF3;
						// use skew symmetric form to remove the calculation of the volume flux

						// update the flux after Lax–Friedrichs penalization
						s_fnS[ k_e ][ 0 ][ i ] = FxS1 * nxJ + FyS1 * nyJ - dF1;
						s_fnS[ k_e ][ 1 ][ i ] = FxS2 * nxJ + FyS2 * nyJ - dF2;
						s_fnS[ k_e ][ 2 ][ i ] = FxS3 * nxJ + FyS3 * nyJ - dF3;
						
					} // i < NfqNfaces      
				}// inner( 0 )
			}// e < K
		}// k_e
		@barrier( "localMemFence" );

		for( int k_e = 0; k_e < p_KblkS; ++k_e; @inner( 1 ) ){  
        	const int e = k_g_e_start + k_e;
        	if( e < K ){
				// apply lift and inverse jacobian
				// p_T: max( number of volume nodes, number of face nodes);
				for( int i = 0; i < p_T; ++i; @inner( 0 ) ){

					if( i < p_Np ){

						dfloat val[ p_Nfields ];
						for( int fld = 0; fld < p_Nfields; ++fld ){
							val[ fld ] = ZERO; 
						}

						// multiplying the lifting matrix
						for( int j = 0; j < p_NfqNfaces; ++j ){
							const dfloat VfTWf_ij = VfTWf[ i + j * p_Np ]; 
							for( int fld = 0; fld < p_Nfields; ++fld ){	 	  
								val[ fld ] += VfTWf_ij * s_fnS[ k_e ][ fld ][ j ];
							}
						}

						// transfer to output variable
						int id = i + e * p_Np * p_Nfields;
						for( int fld = 0; fld < p_Nfields; ++fld ){
							rhs[ id ] += val[ fld ]; id += p_Np;
						}
					}// if (i < p_Np)

				}//inner( 0 )
			}// e < K
		}// k_e
	}// k_g
}

@kernel void update( const int K,
		    		 const dfloat fa,
		    		 const dfloat fb,
		    		 const dfloat fdt,
		    		 const dfloat * M_inv,
		    		 const dfloat * VN,
		    		       dfloat * Q,
		    		       dfloat * Qv,		      
		    		 const dfloat * rhs,
		    		       dfloat * res ){
	/* inputs:
	K:    total number of mesh elements
	fa:   ( dfloat ) mesh->rk4a[ INTRK ];
	fb:   ( dfloat ) mesh->rk4b[ INTRK ];
	fdt:  ( dfloat ) dt;
	M_inv: contains mass matrices inverses for all elements
	JJ:    geometric factors for volume	
	Vq:   volume quadrature interpolation matrix
	Q:	  Matrix with SWE values
	Qv:   Vq * Q
    rhs:  variable holding computed right hand side information
    res:  residual
	*/
	// k_g denoted index of the group
	// k_e denoted index of element inside a group
    // looping over all the group
	for( int k_g = 0; k_g < ( K + p_KblkU - 1 ) / p_KblkU; ++k_g; @outer( 0 ) ){

		@shared dfloat s_Q[ p_KblkU ][ p_Nfields ][ p_Np ];
		// loop over all the elements in the group
		const int k_g_e_start = k_g * p_KblkU;
		for( int k_e = 0; k_e < p_KblkU; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){
				for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
					if( i < p_Np ){
						// update vol values
						// Qi to hold temporary Q value ie (h,hu,hv)
						dfloat Qi[ p_Nfields ];
						// get the index for the quadrature node
						int Qid = i + e * ( p_Nfields + 1 ) * p_Np;
						int Rid = i + e * p_Nfields * p_Np;

						for( int fld = 0; fld < p_Nfields; ++fld ){

							// load multiple M inverse to rhs
							dfloat rhsi = ZERO;
							for( int j = 0; j < p_Np; j++){
								const dfloat Mij = M_inv[ i + p_Np * e + K * p_Np * j ];
								rhsi -= Mij * rhs[ Rid - i + j ];
							}
							// RK time integration part
							dfloat resi = res[ Rid ];
							Qi[ fld ] = Q[ Qid ];

							// update residual and solution
							resi = fa * resi + fdt * rhsi;	  
							Qi[ fld ] += fb * resi;

							// store updated residual and solution
							res[ Rid ] = resi;	  
							Q[ Qid ] = Qi[ fld ];
							// store to shared mem
							s_Q[ k_e ][ fld ][ i ] = Qi[ fld ];
		      				// update index
							Rid += p_Np;
							Qid += p_Np;
						} 
					}// if( i < p_Np )
				}//inner( 0 )
			}// e < K
		}// k_e
		@barrier( "localMemFence" );

		for( int k_e = 0; k_e < p_KblkU; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			// interpolate conservative variabes to quad points
			if( e < K ){
				// interpolate conservative variabes to quad points
				for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
					// val: accumulate matrix vector multiplication result
					dfloat val[ p_Nfields ];
					for( int fld = 0; fld < p_Nfields; ++fld ){
						val[ fld ] = ZERO; 
					}	
					for( int j = 0; j < p_Np; ++j ){
						// Vqij: Vq(i,j), I get to the ith row, j * p_NqT get to jth column
						const dfloat Vqij = VN[ i + j * p_NqT ];
						for( int fld = 0; fld < p_Nfields; ++fld ){
							val[ fld ] += Vqij * s_Q[ k_e ][ fld ][ j ];
						}
					}

					// store values in Qv
					int id = i + p_Nq * ( p_Nfields + 1 ) * e;
					for( int fld = 0; fld < p_Nfields; ++fld ){      
						Qv[ id ] = val[ fld ]; id += p_Nq;
					}
				  
				}//inner( 0 )
			}// e < K
		}
	}// k_g
}

@kernel void rhstest( const int K,
					  const dfloat * M_inv,
		    		  const dfloat * WqJJ,   
		    		  const dfloat * VN,
		    		  const dfloat * rhs,
		    		  const dfloat * rhsv,
		    		        dfloat * rt ){
	/* inputs:
	K:     total number of mesh elements
	M_inv: contains mass matrices inverses for all elements
	WqJJ:  wq .* (Vq * J ), geometric factors
	Vq:    volume quadrature interpolation matrix
	rhsv:  stores the Mk_inv(:,:,e)*(Vq'*(wq.*JJ(:,e).*VV1(:,e))) for all element e
    rhs:   variable holding computed right hand side information
    rt:    right hand side test store right-hand-side test result
	*/
	// loop over all elements
	for( int e = 0; e < K; ++e; @outer( 0 ) ){
		// s_val to keep track rhstest value for element e      
   		@shared dfloat s_val[p_Nq];
   		// s_rhs: stores the rhs value from occa
   		@shared dfloat s_rhs[ p_Nfields ][ p_Np ];
   		// WqJJ:  wq .* (Vq * J ), geometric factors for volume e
		@shared dfloat s_WqJJ[ p_Nq ];
		// loop over all quadrature points
   		for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
   			if( i < p_Np ){
   				int Rid = e * p_Nfields * p_Np;
				for( int fld = 0; fld < p_Nfields; ++fld ){
					// load multiple M inverse to rhs
					dfloat rhsi = ZERO;
					for( int j = 0; j < p_Np; j++){
						const dfloat Mij = M_inv[ i + p_Np * e + K * p_Np * j ];
						rhsi -= Mij * rhs[ Rid + j ];
					}
					s_rhs[ fld ][ i ] = rhsi;
					Rid += p_Np;
				}
			}
			s_WqJJ[ i ] = WqJJ[ i + p_Nq * e ];
		}//inner( 0 )
		@barrier( "localMemFence" );
		for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
			// val: accumulate matrix vector multiplication result
			dfloat val1[ p_Nfields ];
			dfloat val2[ p_Nfields ];
			for( int fld = 0; fld < p_Nfields; ++fld ){
				val1[fld] = ZERO; 
				val2[fld] = ZERO; 
			}
			for( int j = 0; j < p_Np; ++j ){
				const dfloat Vqij   = VN[ i + j * p_NqT ];
				int r_idx = e * p_Nfields * p_Np + j;
				for( int fld = 0; fld < p_Nfields; ++fld ){
					val1[ fld ] += Vqij * rhsv[ r_idx ];
					val2[ fld ] += Vqij * s_rhs[ fld ][ j ];
					r_idx += p_Np;
				}
			}
			
			s_val[ i ] = 0;
			for( int fld = 0; fld < p_Nfields; ++fld ){
				s_val[ i ] += val1[ fld ] * val2[ fld ] * s_WqJJ[ i ];
			}
		}//inner( 0 )
		@barrier( "localMemFence" );
		rt[ e ] = 0;
		for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
			rt[ e ] += s_val[ i ];
		}
		@barrier( "localMemFence" );
	}//outer( 0 )
}