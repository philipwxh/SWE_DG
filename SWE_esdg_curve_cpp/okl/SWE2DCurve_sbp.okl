#define USE_DOUBLE 1

#if USE_DOUBLE
#define dfloat double
#define dfloat4 double4
#define LOGDF log
#define POWDF pow
#define EXPDF exp
#define HALF .5
#define ONE 1.0
#define TWO 2.0
#define ZERO 0.0
#define TOL 1.e-3
#define C1 .3333333333333
#define C2 .2
#define C3 0.142857142857143
#define C4 .1111111111111111

#else
#define dfloat float
#define dfloat4 float4
#define LOGDF logf
#define POWDF powf
#define EXPDF expf
#define HALF .5f
#define ONE 1.f
#define TWO 2.f
#define ZERO 0.f;
#define TOL 1.fe-3
#define C1 .333333333f
#define C2 .2f
#define C3 0.142857142857143f
#define C4 .1111111111111111f
#endif

// helpful functions
// take the average of two numbers
#define avg( a, b ) HALF * ( a + b )

// entropy project function v(u)
void VU( const dfloat h, const dfloat hu, const dfloat hv, const dfloat b,
		       dfloat &V1,     dfloat &V2,      dfloat &V3 ){
	/* inputs:
	h:  SWE water height
	hu: SWE h * u, u is water velocity in the x direction
	hv: SWE h * v, v is water velocity in the y direction
	b:  SWE bottom height
	V1: SWE entropy variable for h component
	V2: SWE entropy variable for hu component
	V3: SWE entropy variable for hv component
	other:
	g:  SWE gravitational constant
	*/
	V2 = hu / h;
	V3 = hv / h;
	V1 = p_g * h + p_g * b - 0.5 * ( V2 * V2 + V3 * V3 );
}

// entropy project function u(v)
void UV( const dfloat V1, const dfloat V2, const dfloat V3, const dfloat b,
	           dfloat &h,       dfloat &hu,      dfloat &hv ){
	/* inputs:
	V1: SWE entropy variable for h component
	V2: SWE entropy variable for hu component
	V3: SWE entropy variable for hv component
	b:  SWE bottom height
	g:  SWE gravitational constant
	h:  SWE water height evalution at quadrature points
	hu: SWE h * u, evalution at quadrature points
	hv: SWE h * v, evalution at quadrature points
	other:
	g:  SWE gravitational constant
	*/
	h = ( V1 + .5 * ( V2 * V2 + V3 * V3 ) ) / p_g - b;
	hu = h * V2;
	hv = h * V3;
}

// compute the flux for SWE 2D (surface flux)
void SWE2d_Sflux( const dfloat hL, const dfloat hR, const dfloat uL,
				  const dfloat uR, const dfloat vL, const dfloat vR,
                        dfloat &FxS1,    dfloat &FyS1,    dfloat &FxS2,
                        dfloat &FyS2,    dfloat &FxS3,    dfloat &FyS3 ){
	/* inputs:
	hL: 	SWE water height on the left
	hR: 	SWE water height on the right
	uL: 	SWE water velocity in x direction on the left
	uR:  	SWE water velocity in x direction on the right
	vL:  	SWE water velocity in y direction on the left
	vR:  	SWE water velocity in y direction on the right
	FxS123: surface flux for x direction for component 1, 2 and 3
	FyS123: surface flux for y direction for component 1, 2 and 3
	other:
	g:  SWE gravitational constant
	*/
	//     h_avg:     {{h}}
	const dfloat h_avg = avg( hL, hR );
	//     u_avg:     {{u}}
	const dfloat u_avg = avg( uL, uR );
	//     v_avg:     {{v}}
	const dfloat v_avg = avg( vL, vR );
	//     half_g_h_sq_avg:  .5 *  g  *    {{h^2}}
	const dfloat half_g_h_sq_avg = p_g_half * avg( hL * hL, hR * hR );
 // FxS1: {{h}}{{u}}
	FxS1 = h_avg * u_avg;
 // FyS1: {{h}}{{v}}
	FyS1 = h_avg * v_avg;
 // FxS2: {{h}}{{u}}{{u}} + .5g{{h^2}}
	FxS2 = FxS1 * u_avg + half_g_h_sq_avg;
 // FyS2: {{h}}{{v}}{{u}}
	FyS2 = FyS1 * u_avg;
 // FxS3: {{h}}{{u}}{{v}}, same as FyS2
	FxS3 = FyS2;
 // FyS3: {{h}}{{v}}{{v}} + .5g{{h^2}}
	FyS3 = FyS1 * v_avg + half_g_h_sq_avg;
}

// compute the flux for SWE 2D (volume flux)
void SWE2d_Vflux( const dfloat hL, const dfloat hR, const dfloat uL, 
				  const dfloat uR, const dfloat vL, const dfloat vR,
                        dfloat &FxV1, 	 dfloat &FyV1,    dfloat &FxV2,
                        dfloat &FyV2, 	 dfloat &FxV3,    dfloat &FyV3 ){
	/* inputs:
	hL: 	SWE water height on the left
	hR: 	SWE water height on the right
	uL: 	SWE water velocity in x direction on the left
	uR:  	SWE water velocity in x direction on the right
	vL:  	SWE water velocity in y direction on the left
	vR:  	SWE water velocity in y direction on the right
	FxV123: volume flux for x direction for component 1, 2 and 3
	FyV123: volume flux for y direction for component 1, 2 and 3
	other:
	g:  SWE gravitational constant
	*/
	//     h_avg:     {{h}}
	const dfloat h_avg = avg( hL, hR );
	//     u_avg:     {{u}}
	const dfloat u_avg = avg( uL, uR );
	//     v_avg:     {{v}}
	const dfloat v_avg = avg( vL, vR );
	//     half_g_h_sq_avg:  .5 *  g  *    {{h^2}}
	const dfloat half_g_h_sq_avg = p_g_half * avg( hL * hL, hR * hR );

	const dfloat g_h_avg_sq = p_g * h_avg * h_avg;
 // FxV1: {{hu}}
	FxV1 = avg( hL * uL, hR * uR );
 // FyV1: {{hv}}
	FyV1 = avg( hL * vL, hR * vR );
 // FxV2: {{hu}}*{{u}}  + g *{{h}}*{{h}} - .5g{{h^2}}
	FxV2 = FxV1 * u_avg + g_h_avg_sq - half_g_h_sq_avg;
 // FyV2: {{hv}}* {{u}}
	FyV2 = FyV1 * u_avg;
 // FyV2: {{hu}}* {{v}}
	FxV3 = FxV1 * v_avg;
 // FyV3: {{hv}}*{{v}}  + g*{{h}}*{{h}} - .5g{{h^2}}
	FyV3 = FyV1 * v_avg + g_h_avg_sq - half_g_h_sq_avg;
}

// simplified volume kernel
@kernel void volume( const int K,
		    		 const dfloat *  rxJJ,
		    		 const dfloat *  ryJJ,
		    		 const dfloat *  sxJJ,
		    		 const dfloat *  syJJ,
		    		 const dfloat *  gBTMx,
		    		 const dfloat *  gBTMy,
		    		 const dfloat *  QNr,
		    		 const dfloat *  QNs,
		    		 const dfloat *  Q,
		    		       dfloat *  rhsv ){
	/* inputs:
	K:    total number of mesh elements
	rxJJ:  VN * ( mesh->rxJ );
	ryJJ:  VN * ( mesh->ryJ );
	sxJJ:  VN * ( mesh->sxJ );
	syJJ:  VN * ( mesh->syJ );
	gBTMx: g * QNx * BTM, x derivative of bottom geometry
	gBTMy: g * QNy * BTM, y derivative of bottom geometry
	QNr:   skew symmetric form of SBP matrix for r direction
	QNs:   skew symmetric form of SBP matrix for s direction
    VN:    [Vq;Vf]
    Qv:    variable to hold projected volume values
	Qf:    variable to hold projected face values
    rhs:   variable to hold updated right hand side information
	*/ 	
    // looping over all the elements
	for( int e = 0; e < K; ++e; @outer( 0 ) ){

		// setting up the shared memories for fast read and write
		// s_Q: store Q values
		@shared dfloat s_Q[ p_Nfields ][ p_Nq ];
		@shared dfloat s_gBTx[ p_Nq ];
		@shared dfloat s_gBTy[ p_Nq ];

		// s_rhsv: store rhs values
		// @shared dfloat s_rhsv[ p_Nfields ][ p_NqT ];
		// store geometric terms  
		@shared dfloat s_rxJJ[ p_Nq ]; 
		@shared dfloat s_ryJJ[ p_Nq ];  
		@shared dfloat s_sxJJ[ p_Nq ];  
		@shared dfloat s_syJJ[ p_Nq ];     
		// assume these are conservative variables
		// looping over all the quadrature pts
		for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
            int geo_idx = i + p_Nq * e;
			s_rxJJ[ i ] = rxJJ[ geo_idx ];
			s_ryJJ[ i ] = ryJJ[ geo_idx ];
			s_sxJJ[ i ] = sxJJ[ geo_idx ];
			s_syJJ[ i ] = syJJ[ geo_idx ];
			s_gBTx[ i ] = gBTMx[ geo_idx ];
			s_gBTy[ i ] = gBTMy[ geo_idx ];
		  
			// draw from both vol and face values, read out to shared from Qv and Qf
			// idv: index for the volume value
			// idf: index for the face value
			int idv = i + p_Nq * ( p_Nfields + 1 ) * e;
			int idr = i + p_Nq * p_Nfields * e;
			for( int fld = 0; fld < ( p_Nfields ); ++fld ){
				s_Q[ fld ][ i ] = Q[ idv ]; idv += p_Nq;
				rhsv[idr] = 0; idr += p_Nq;
			}
		}//inner( 0 )
		@barrier( "localMemFence" );           

		// apply flux differencing: sum(Q.*F,2) -> s_rhsv (shared memory)
		for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
		    // val: store the volume flux 
			dfloat val[ p_Nfields ];
			for( int fld = 0; fld < p_Nfields; ++fld ){
				val[ fld ] = ZERO; 
			}
			// extract the info from the ith node
			const dfloat h_i     = s_Q[ 0 ][ i ];
			const dfloat inv_h_i = ONE / h_i;
			const dfloat u_i     = s_Q[ 1 ][ i ] * inv_h_i;
			const dfloat v_i     = s_Q[ 2 ][ i ] * inv_h_i;
            
			// apply Qr, Qs
			// in thus loop, we sum the Qxij * FxVij + Qyij * FyVij over j
			for( int j = 0; j < p_Nq; ++j ){
				// extract the info from the jth node
				const dfloat h_j     = s_Q[ 0 ][ j ];
				const dfloat inv_h_j = ONE / h_j;
				const dfloat u_j     = s_Q[ 1 ][ j ] * inv_h_j;
				const dfloat v_j     = s_Q[ 2 ][ j ] * inv_h_j;
			
				// compute the volume flux
				dfloat FxV1, FyV1, FxV2, FyV2, FxV3, FyV3;
				SWE2d_Vflux( h_i, h_j, u_i, u_j, v_i, v_j,
				     		 FxV1, FyV1, FxV2, FyV2, FxV3, FyV3 );
				
				const dfloat Qrij = HALF * QNr[ i + j * p_Nq ];
				const dfloat Qsij = HALF * QNs[ i + j * p_Nq ];
				const dfloat Qx   = Qrij * ( s_rxJJ[i] + s_rxJJ[j] ) +
				                    Qsij * ( s_sxJJ[i] + s_sxJJ[j] );
				const dfloat Qy   = Qrij * ( s_ryJJ[i] + s_ryJJ[j] )+
				                    Qsij * ( s_syJJ[i] + s_syJJ[j] );

				val[ 0 ] += Qx * FxV1 + Qy * FyV1;
				val[ 1 ] += Qx * FxV2 + Qy * FyV2;
				val[ 2 ] += Qx * FxV3 + Qy * FyV3;
			}
			val[ 1 ] += h_i * s_gBTx[ i ];
			val[ 2 ] += h_i * s_gBTy[ i ];
			
			// write out to the shared memory
			int id = i + e * p_Nfields * p_Nq;
			for( int fld = 0; fld < p_Nfields; ++fld ){
				rhsv[ id ] += 2 * val[ fld ]; id += p_Nq;
			}
		}// inner0
	}//outer( 0 )
}

@kernel void surface( const int K,
					  const int    * E_sbp_idx,
		     		  const dfloat * fgeo,		     
		     		  const int    * mapPq, // face index into volume nodes
		     		  const int    * bcFlag,
		     		  const dfloat * Pf,  // lifting matrix
		    		  const dfloat * Q, // entropy projected variables
		     		        dfloat * rhsv ){
	/* inputs:
	K:      total number of mesh elements
	fgeo:   face node geometric terms [rxJ, rxJf]
	mapPq:  map from face node to neighbor face node
	bcFlag: Flag to specify boundary conditions
    VfTWf:  Vf^T * Wf );
	Qf:     variable to hold projected face values
    rhs:    variable to hold updated right hand side information
	*/ 	

	// k_g denoted index of the group
	// k_e denoted index of element inside a group
    // looping over all the group
	for( int k_g = 0; k_g < ( K + p_KblkS - 1 ) / p_KblkS; ++k_g; @outer( 0 ) ){

		@shared dfloat s_fnS[ p_KblkS ][ p_Nfields ][ p_NfqNfaces ];
		// loop over all the elements in the group
		const int k_g_e_start = k_g * p_KblkS;
        for( int k_e = 0; k_e < p_KblkS; ++k_e; @inner( 1 ) ){  
        	const int e = k_g_e_start + k_e;
        	if( e < K ){
				for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
					if( i < p_NfqNfaces ){
						// idM: index of current node
						// idP: index of neighbor node
						int idM = E_sbp_idx[ i ] + e * ( p_Nfields + 1 ) * p_Nq;
						int idP = mapPq[ i + e * p_NfqNfaces ];
						// idP = idP / p_NfqNfaces * p_Nq + idP % p_NfqNfaces;
						// cout << "idM: " << idM << endl;
						// cout << "idP: " << idP << endl << endl << endl;
						// load +/- values
						const dfloat hM  = Q[ idM ];  idM += p_Nq;
						const dfloat huM = Q[ idM ];  idM += p_Nq;
						const dfloat hvM = Q[ idM ];

						const dfloat hP  = Q[ idP ];  idP += p_Nq;
						const dfloat huP = Q[ idP ];  idP += p_Nq;
						const dfloat hvP = Q[ idP ];

						const dfloat inv_hM = ONE / hM;
						const dfloat uM     = huM * inv_hM;
						const dfloat vM     = hvM * inv_hM;
						const dfloat inv_hP = ONE / hP; 	
						const dfloat uP     = huP * inv_hP;	
						const dfloat vP     = hvP * inv_hP;
		 				
		 				// if(hM == 0 or hP == 0 ){
		 				// 	cout<< "idM = "<< idM - 2*p_Nq << ", idP = "<< idP - 2*p_Nq<<endl;
		 				// 	cout << "hM = " << hM << ", hP =  " <<hP <<endl;
		 				// }
						// compute the surface flux
						dfloat FxS1,FxS2,FxS3,FyS1,FyS2,FyS3;      
						SWE2d_Sflux( hM, hP, uM, uP, vM, vP,
							 		  FxS1, FyS1, FxS2, FyS2, FxS3, FyS3 );

						// use skew symmetric form to remove the calculation of the volume flux
						// dfloat FxV1, FyV1, FxV2, FyV2, FxV3, FyV3;
						// SWE2d_Vflux( hM, hM, uM, uM, vM, vM,
						//      		 FxV1, FyV1, FxV2, FyV2, FxV3, FyV3 );

						// constant over each face but oh well
						const int    idf  = i + p_NfqNfaces * p_Nfgeo * e;
						const dfloat nxJ  = fgeo[ idf ];
						const dfloat nyJ  = fgeo[ idf + p_NfqNfaces ];
						const dfloat sJ   = fgeo[ idf + 2 * p_NfqNfaces ];
						const dfloat nx   = nxJ / sJ;
						const dfloat ny   = nyJ / sJ;
						const dfloat LM   = abs( uM * nx + vM * ny ) + sqrt( p_g * hM );
						const dfloat LP   = abs( uP * nx + vP * ny ) + sqrt( p_g * hP );
						const dfloat LFc  = fmax( LM, LP );
						const dfloat LfsJ = HALF * p_tau * LFc * sJ;

						const dfloat dF1  = LfsJ * ( hP - hM );
						const dfloat dF2  = LfsJ * ( hP * uP - hM * uM );
						const dfloat dF3  = LfsJ * ( hP * vP - hM * vM );

						// s_fnS[ 0 ][ i ] = ( FxS1 - FxV1 ) * nxJ + ( FyS1 - FyV1 ) * nyJ - dF1;
						// s_fnS[ 1 ][ i ] = ( FxS2 - FxV2 ) * nxJ + ( FyS2 - FyV2 ) * nyJ - dF2;
						// s_fnS[ 2 ][ i ] = ( FxS3 - FxV3 ) * nxJ + ( FyS3 - FyV3 ) * nyJ - dF3;
						// use skew symmetric form to remove the calculation of the volume flux

						// update the flux after Lax–Friedrichs penalization
						s_fnS[ k_e ][ 0 ][ i ] = FxS1 * nxJ + FyS1 * nyJ - dF1;

						// if(e == 0)
						// 	cout << s_fnS[ k_e ][ 0 ][ i ] << endl;

						s_fnS[ k_e ][ 1 ][ i ] = FxS2 * nxJ + FyS2 * nyJ - dF2;
						s_fnS[ k_e ][ 2 ][ i ] = FxS3 * nxJ + FyS3 * nyJ - dF3;
						
					} // i < NfqNfaces      
				}// inner( 0 )
			}// e < K
		}// k_e
		@barrier( "localMemFence" );

		for( int k_e = 0; k_e < p_KblkS; ++k_e; @inner( 1 ) ){  
        	const int e = k_g_e_start + k_e;
        	if( e < K ){
				// apply lift and inverse jacobian
				// p_T: max( number of volume nodes, number of face nodes);
				for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
					dfloat val[ p_Nfields ];
					for( int fld = 0; fld < p_Nfields; ++fld ){
						val[ fld ] = ZERO; 
					}

					// multiplying the lifting matrix
					for( int j = 0; j < p_NfqNfaces; ++j ){
						const dfloat Pf_ij = Pf[ i + j * p_Nq ]; 
						for( int fld = 0; fld < p_Nfields; ++fld ){	 	  
							val[ fld ] += Pf_ij * s_fnS[ k_e ][ fld ][ j ];
						}
					}

					// transfer to output variable
					int id = i + e * p_Nq * p_Nfields;
					for( int fld = 0; fld < p_Nfields; ++fld ){
						rhsv[ id ] += val[ fld ]; id += p_Nq;
					}

				}//inner( 0 )
			}// e < K
		}// k_e
	}// k_g
}

@kernel void update( const int K,
		    		 const dfloat fa,
		    		 const dfloat fb,
		    		 const dfloat fdt,
		    		 const dfloat * M_inv,
		    		       dfloat * Q,
		    		 const dfloat * rhsv,
		    		       dfloat * res ){
	/* inputs:
	K:    total number of mesh elements
	fa:   ( dfloat ) mesh->rk4a[ INTRK ];
	fb:   ( dfloat ) mesh->rk4b[ INTRK ];
	fdt:  ( dfloat ) dt;
	M_inv: contains mass matrices inverses for all elements
	JJ:    geometric factors for volume	
	Vq:   volume quadrature interpolation matrix
	Q:	  Matrix with SWE values
	Qv:   Vq * Q
    rhs:  variable holding computed right hand side information
    res:  residual
	*/
	// k_g denoted index of the group
	// k_e denoted index of element inside a group
    // looping over all the group
	for( int k_g = 0; k_g < ( K + p_KblkU - 1 ) / p_KblkU; ++k_g; @outer( 0 ) ){

		@shared dfloat s_Q[ p_KblkU ][ p_Nfields ][ p_Nq ];
		// loop over all the elements in the group
		const int k_g_e_start = k_g * p_KblkU;
		for( int k_e = 0; k_e < p_KblkU; ++k_e; @inner( 1 ) ){
			const int e = k_g_e_start + k_e;
			if( e < K ){
				for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
					// update vol values
					// Qi to hold temporary Q value ie (h,hu,hv)
					dfloat Qi[ p_Nfields ];
					// get the index for the quadrature node
					int Qid = i + e * ( p_Nfields + 1 ) * p_Nq;
					int Rid = i + e * p_Nfields * p_Nq;

					for( int fld = 0; fld < p_Nfields; ++fld ){

						// load multiple M inverse to rhs
						dfloat rhsi = ZERO;
						for( int j = 0; j < p_Nq; j++){
							const dfloat Mij = M_inv[ i + p_Nq * e + K * p_Nq * j ];
							rhsi -= Mij * rhsv[ Rid - i + j ];
						}
						// RK time integration part
						dfloat resi = res[ Rid ];
						Qi[ fld ] = Q[ Qid ];

						// update residual and solution
						resi = fa * resi + fdt * rhsi;	  
						Qi[ fld ] += fb * resi;

						// store updated residual and solution
						res[ Rid ] = resi;	  
						Q[ Qid ] = Qi[ fld ];
						// store to shared mem
						// s_Q[ k_e ][ fld ][ i ] = Qi[ fld ];
	      				// update index
						Rid += p_Nq;
						Qid += p_Nq;
					} 
				}//inner( 0 )
			}// e < K
		}// k_e
	}// k_g
}

@kernel void rhstest( const int K,
					  const dfloat * M_inv,
		    		  const dfloat * WqJJ,   
		    		  const dfloat * Q,
		    		  const dfloat * rhsv,
		    		        dfloat * rt ){
	/* inputs:
	K:     total number of mesh elements
	M_inv: contains mass matrices inverses for all elements
	WqJJ:  wq .* (Vq * J ), geometric factors
	Vq:    volume quadrature interpolation matrix
	rhsv:  stores the Mk_inv(:,:,e)*(Vq'*(wq.*JJ(:,e).*VV1(:,e))) for all element e
    rhs:   variable holding computed right hand side information
    rt:    right hand side test store right-hand-side test result
	*/
	for( int e = 0; e < K; ++e; @outer( 0 ) ){
		// declare shared memory for all nodes in one elements
		// p_Nq: number of volume quadrature points in one element
		@shared dfloat s_Q[ p_Nfields ][ p_Nq ];
		// s_rhsv: rhsv value at quadrature points in one element
		@shared dfloat s_rhsv[ p_Nfields ][ p_Nq ];
		// s_WqJJ: stores wq .* (Vq * J ) column e
		@shared dfloat s_WqJJ[ p_Nq ];
		// s_val to keep track rhstest value for element e      
   		@shared dfloat s_val[ p_Nq ];
   		

		// extract values of conservative vars at quad pts
		// p_NqT: total number of quadrature points in one element
		// loop over all quadrature points in one element
		for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
			// we project the volume quadrature points first
			// get the index of all fields for that quadrature points
			int Qid = i + e * p_Nq * ( p_Nfields + 1 );
			// extract the info from Qv for the fields
			const dfloat u1 = Q[ Qid ];	Qid += p_Nq;
			const dfloat u2 = Q[ Qid ]; Qid += p_Nq;
			const dfloat u3 = Q[ Qid ]; Qid += p_Nq;
			const dfloat bt = Q[ Qid ];
			// compute entropy variables at qpts
			dfloat v1, v2, v3;
			VU( u1, u2, u3, bt, v1, v2, v3 );

			s_Q[ 0 ][ i ] = v1;
			s_Q[ 1 ][ i ] = v2;
			s_Q[ 2 ][ i ] = v3;
			int Rid = e * p_Nfields * p_Nq;
			for( int fld = 0; fld < p_Nfields; ++fld ){
				// load multiple M inverse to rhs
				dfloat rhsi = ZERO;
				for( int j = 0; j < p_Nq; j++){
					const dfloat Mij = M_inv[ i + p_Nq * e + K * p_Nq * j ];
					rhsi -= Mij * rhsv[ Rid + j ];
				}
				s_rhsv[ fld ][ i ] = rhsi;
				Rid += p_Nq;
			}
			s_WqJJ[ i ] = WqJJ[ i + p_Nq * e ];
		}//inner( 0 )
		@barrier( "localMemFence" );

		for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
			s_val[ i ] = 0;
			for( int fld = 0; fld < p_Nfields; ++fld ){
				s_val[ i ] += s_Q[ fld ][ i ] * s_rhsv[ fld ][ i ] * s_WqJJ[ i ];
			}
		}//inner( 0 )
		@barrier( "localMemFence" );
		rt[ e ] = 0;
		for( int i = 0; i < p_Nq; ++i; @inner( 0 ) ){
			rt[ e ] += s_val[ i ];
		}
		@barrier( "localMemFence" );
	}//outer( 0 )
}